name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
   # environment: galileo-env-v01
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      # - name: Terraform Init
      #   id: init
      #   run: terraform init

      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.2.4
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: '.'
          tf_actions_comment: true
          args: '-var-file="vars.tfvars"'

      # - name: Terraform Validate
      #   id: validate
      #   run: terraform validate -no-color
      #   with:
      #     args: '-var-file="vars.tfvars"'

      - name: 'Terraform Validate'
        id: validate
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.2.4
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: '.'
          tf_actions_comment: true
          args: '-var-file="vars.tfvars"'

      # - name: Terraform Plan
      #   id: plan
      #   if: github.event_name == 'pull_request'
      #   run: terraform plan -no-color -input=false 
      #   continue-on-error: true
      #   with:
      #     args: '-var-file="vars.tfvars"'

      - name: 'Terraform Plan'
        id: plan
        if: github.event_name == 'pull_request'
        uses: hashicorp/terraform-github-actions@master
        continue-on-error: true
        with:
          tf_actions_version: 1.2.4
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: '.'
          tf_actions_comment: true
          args: '-input=false -var-file="vars.tfvars"'

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve -input=false 
      #   with:
      #     args: '-var-file="vars.tfvars"' 

      - name: 'Terraform Apply'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.2.4
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: '.'
          tf_actions_comment: true
          args: ' -auto-approve -input=false -var-file="vars.tfvars"'